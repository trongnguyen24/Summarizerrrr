// @ts-nocheck
import { generateUUID } from '@/lib/utils/utils.js'
import { appStateStorage } from '@/services/wxtStorageService'

/**
 * Helper function to send messages to the background script for storage operations.
 * @param {string} type - The message type (e.g., 'SAVE_TO_HISTORY').
 * @param {object} payload - The data to be sent.
 * @returns {Promise<any>} - The response from the background script.
 */
async function sendStorageMessage(type, payload) {
  try {
    const response = await browser.runtime.sendMessage({
      type,
      payload,
    })

    if (response && response.success) {
      return response
    } else {
      throw new Error(response?.error || 'Unknown error from background script')
    }
  } catch (error) {
    console.error(
      `[FPStorageService] Message passing failed for ${type}:`,
      error
    )
    throw error
  }
}

/**
 * Chuẩn bị dữ liệu tóm tắt từ local state để lưu vào DB
 * @param {object} localState - State từ useSummarization
 * @param {string} contentType - Loại nội dung (youtube, course, general)
 * @returns {Array<{title: string, content: string}>}
 */
function prepareSummaries(localState, contentType) {
  const summaries = []

  if (contentType === 'youtube') {
    if (localState.summary) {
      summaries.push({ title: 'Summary', content: localState.summary })
    }
    if (localState.chapterSummary) {
      summaries.push({
        title: 'Chapters',
        content: localState.chapterSummary,
      })
    }
  } else if (contentType === 'course') {
    if (localState.summary) {
      summaries.push({ title: 'Summary', content: localState.summary })
    }
    if (localState.courseConcepts) {
      summaries.push({
        title: 'Concepts',
        content: localState.courseConcepts,
      })
    }
  } else {
    if (localState.summary) {
      summaries.push({ title: 'Summary', content: localState.summary })
    }
  }

  return summaries.filter((s) => s.content && s.content.trim() !== '')
}

/**
 * Lưu tóm tắt từ Floating Panel vào History.
 * @param {object} localState - State từ useSummarization.
 * @param {{title: string, url: string}} pageInfo - Thông tin trang.
 * @returns {Promise<string>} - ID của history item đã được tạo.
 */
export async function saveToHistory(localState, pageInfo) {
  const summaries = prepareSummaries(localState, localState.contentType)

  if (summaries.length === 0) {
    console.warn('[FPStorageService] No summary content to save to history.')
    return null
  }

  // Validate pageInfo
  if (!pageInfo || typeof pageInfo !== 'object') {
    throw new Error('Invalid pageInfo: must be an object')
  }

  const historyEntry = {
    id: generateUUID(),
    title: pageInfo.title || 'Unknown Title',
    url: pageInfo.url || 'Unknown URL',
    date: new Date().toISOString(),
    summaries: summaries,
    isArchived: false, // Default to not archived
    contentType: localState.contentType || 'website', // Add contentType
  }

  try {
    await sendStorageMessage('SAVE_TO_HISTORY', {
      historyData: historyEntry,
    })
    console.log(
      '[FPStorageService] Sent save to History request:',
      historyEntry
    )
    // Notify other components that the data has been updated
    await appStateStorage.setValue({ data_updated_at: new Date().getTime() })
    return historyEntry.id
  } catch (error) {
    console.error('[FPStorageService] Error saving to History:', error)
    throw error // Re-throw for the component to handle
  }
}

/**
 * Lưu tóm tắt từ Floating Panel vào Archive (bảng summaries).
 * @param {object} localState - State từ useSummarization.
 * @param {{title: string, url: string}} pageInfo - Thông tin trang.
 * @param {string|null} historySourceId - ID của history item gốc (nếu có).
 * @returns {Promise<string>} - ID của summary item đã được tạo.
 */
export async function saveToArchive(
  localState,
  pageInfo,
  historySourceId = null
) {
  const summaries = prepareSummaries(localState, localState.contentType)

  if (summaries.length === 0) {
    console.warn('[FPStorageService] No summary content to save to archive.')
    return null
  }

  const archiveEntry = {
    // ID will be generated by the background script's addSummary function
    title: pageInfo.title,
    url: pageInfo.url,
    date: new Date().toISOString(),
    summaries: summaries,
    historySourceId: historySourceId, // Link to the original history item
  }

  try {
    const response = await sendStorageMessage('SAVE_TO_ARCHIVE', {
      archiveEntry,
      historySourceId,
    })
    console.log(
      '[FPStorageService] Sent save to Archive request:',
      archiveEntry
    )

    // Notify other components that the data has been updated
    await appStateStorage.setValue({ data_updated_at: new Date().getTime() })
    return response.newArchiveId
  } catch (error) {
    console.error('[FPStorageService] Error saving to Archive:', error)
    throw error
  }
}
